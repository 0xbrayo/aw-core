# Stubs for peewee (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
import threading
import logging
from collections import namedtuple

class NullHandler(logging.Handler):
    def emit(self, record): ...

class attrdict(dict):
    def __getattr__(self, attr): ...

JOIN = ...  # type: Any
JOIN_INNER = ...  # type: Any
JOIN_LEFT_OUTER = ...  # type: Any
JOIN_FULL = ...  # type: Any

class Proxy:
    def __init__(self): ...
    obj = ...  # type: Any
    def initialize(self, obj): ...
    def attach_callback(self, callback): ...
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, value): ...

class DeferredRelation:
    fields = ...  # type: Any
    def __init__(self, rel_model_name=None): ...
    def set_field(self, model_class, field, name): ...
    def set_model(self, rel_model): ...
    @staticmethod
    def resolve(model_cls): ...

class _CDescriptor:
    def __get__(self, instance, instance_type=None): ...

class Node:
    c = ...  # type: Any
    def __init__(self): ...
    @classmethod
    def extend(cls, name=None, clone=False): ...
    def clone_base(self): ...
    def clone(self): ...
    def __invert__(self): ...
    def alias(self, a=None): ...
    def bind_to(self, bt): ...
    def asc(self): ...
    def desc(self): ...
    def __pos__(self): ...
    def __neg__(self): ...
    __and__ = ...  # type: Any
    __or__ = ...  # type: Any
    __add__ = ...  # type: Any
    __sub__ = ...  # type: Any
    __mul__ = ...  # type: Any
    __div__ = ...  # type: Any
    __truediv__ = ...  # type: Any
    __xor__ = ...  # type: Any
    __radd__ = ...  # type: Any
    __rsub__ = ...  # type: Any
    __rmul__ = ...  # type: Any
    __rdiv__ = ...  # type: Any
    __rtruediv__ = ...  # type: Any
    __rand__ = ...  # type: Any
    __ror__ = ...  # type: Any
    __rxor__ = ...  # type: Any
    def __eq__(self, rhs): ...
    def __ne__(self, rhs): ...
    __lt__ = ...  # type: Any
    __le__ = ...  # type: Any
    __gt__ = ...  # type: Any
    __ge__ = ...  # type: Any
    __lshift__ = ...  # type: Any
    __rshift__ = ...  # type: Any
    __mod__ = ...  # type: Any
    __pow__ = ...  # type: Any
    bin_and = ...  # type: Any
    bin_or = ...  # type: Any
    def in_(self, rhs): ...
    def not_in(self, rhs): ...
    def is_null(self, is_null=True): ...
    def contains(self, rhs): ...
    def startswith(self, rhs): ...
    def endswith(self, rhs): ...
    def between(self, low, high): ...
    def regexp(self, expression): ...
    def concat(self, rhs): ...

class SQL(Node):
    value = ...  # type: Any
    params = ...  # type: Any
    def __init__(self, value, *params): ...
    def clone_base(self): ...

R = ...  # type: Any

class Entity(Node):
    path = ...  # type: Any
    def __init__(self, *path): ...
    def clone_base(self): ...
    def __getattr__(self, attr): ...

class Func(Node):
    name = ...  # type: Any
    arguments = ...  # type: Any
    def __init__(self, name, *arguments): ...
    def coerce(self, coerce=True): ...
    def clone_base(self): ...
    def over(self, partition_by=None, order_by=None, window=None): ...
    def __getattr__(self, attr): ...

fn = ...  # type: Any

class Expression(Node):
    lhs = ...  # type: Any
    op = ...  # type: Any
    rhs = ...  # type: Any
    flat = ...  # type: Any
    def __init__(self, lhs, op, rhs, flat=False): ...
    def clone_base(self): ...

class Param(Node):
    value = ...  # type: Any
    adapt = ...  # type: Any
    def __init__(self, value, adapt=None): ...
    def clone_base(self): ...

class Passthrough(Param): ...

class Clause(Node):
    glue = ...  # type: Any
    parens = ...  # type: Any
    nodes = ...  # type: Any
    def __init__(self, *nodes, **kwargs): ...
    def clone_base(self): ...

class CommaClause(Clause):
    glue = ...  # type: Any

class EnclosedClause(CommaClause):
    parens = ...  # type: Any

class Window(Node):
    partition_by = ...  # type: Any
    order_by = ...  # type: Any
    def __init__(self, partition_by=None, order_by=None): ...
    def __sql__(self): ...
    def clone_base(self): ...

def Check(value): ...

class DQ(Node):
    query = ...  # type: Any
    def __init__(self, **query): ...
    def clone_base(self): ...

class _StripParens(Node):
    node = ...  # type: Any
    def __init__(self, node): ...

JoinMetadata = namedtuple('JoinMetadata', [])

class Join:
    def get_foreign_key(self, source, dest, field=None): ...
    def get_join_type(self): ...
    def model_from_alias(self, model_or_alias): ...
    @property
    def metadata(self): ...

class FieldDescriptor:
    field = ...  # type: Any
    att_name = ...  # type: Any
    def __init__(self, field): ...
    def __get__(self, instance, instance_type=None): ...
    def __set__(self, instance, value): ...

class Field(Node):
    db_field = ...  # type: Any
    null = ...  # type: bool
    index = ...  # type: bool
    unique = ...  # type: bool
    verbose_name = ...  # type: Any
    help_text = ...  # type: Any
    db_column = ...  # type: Any
    default = ...  # type: Any
    choices = ...  # type: Any
    primary_key = ...  # type: Any
    sequence = ...  # type: Any
    constraints = ...  # type: Any
    schema = ...  # type: Any
    def __init__(self, null=False, index=False, unique=False, verbose_name=None, help_text=None, db_column=None, default=None, choices=None, primary_key=False, sequence=None, constraints=None, schema=None): ...
    def clone_base(self, **kwargs): ...
    name = ...  # type: Any
    model_class = ...  # type: Any
    def add_to_class(self, model_class, name): ...
    def get_database(self): ...
    def get_column_type(self): ...
    def get_db_field(self): ...
    def get_modifiers(self): ...
    def coerce(self, value): ...
    def db_value(self, value): ...
    def python_value(self, value): ...
    def as_entity(self, with_table=False): ...
    def __ddl_column__(self, column_type): ...
    def __ddl__(self, column_type): ...
    def __hash__(self): ...

class BareField(Field):
    db_field = ...  # type: Any
    coerce = ...  # type: Any
    def __init__(self, coerce=None, *args, **kwargs): ...
    def clone_base(self, **kwargs): ...

class IntegerField(Field):
    db_field = ...  # type: Any
    coerce = ...  # type: Any

class BigIntegerField(IntegerField):
    db_field = ...  # type: Any

class SmallIntegerField(IntegerField):
    db_field = ...  # type: Any

class PrimaryKeyField(IntegerField):
    db_field = ...  # type: Any
    def __init__(self, *args, **kwargs): ...

class _AutoPrimaryKeyField(PrimaryKeyField):
    def add_to_class(self, model_class, name): ...

class FloatField(Field):
    db_field = ...  # type: Any
    coerce = ...  # type: Any

class DoubleField(FloatField):
    db_field = ...  # type: Any

class DecimalField(Field):
    db_field = ...  # type: Any
    max_digits = ...  # type: Any
    decimal_places = ...  # type: Any
    auto_round = ...  # type: Any
    rounding = ...  # type: Any
    def __init__(self, max_digits=10, decimal_places=5, auto_round=False, rounding=None, *args, **kwargs): ...
    def clone_base(self, **kwargs): ...
    def get_modifiers(self): ...
    def db_value(self, value): ...
    def python_value(self, value): ...

class CharField(Field):
    db_field = ...  # type: Any
    max_length = ...  # type: Any
    def __init__(self, max_length=255, *args, **kwargs): ...
    def clone_base(self, **kwargs): ...
    def get_modifiers(self): ...
    def coerce(self, value): ...

class FixedCharField(CharField):
    db_field = ...  # type: Any
    def python_value(self, value): ...

class TextField(Field):
    db_field = ...  # type: Any
    def coerce(self, value): ...

class BlobField(Field):
    db_field = ...  # type: Any
    def add_to_class(self, model_class, name): ...
    def db_value(self, value): ...

class UUIDField(Field):
    db_field = ...  # type: Any
    def db_value(self, value): ...
    def python_value(self, value): ...

class _BaseFormattedField(Field):
    formats = ...  # type: Any
    def __init__(self, formats=None, *args, **kwargs): ...
    def clone_base(self, **kwargs): ...

class DateTimeField(_BaseFormattedField):
    db_field = ...  # type: Any
    formats = ...  # type: Any
    def python_value(self, value): ...
    year = ...  # type: Any
    month = ...  # type: Any
    day = ...  # type: Any
    hour = ...  # type: Any
    minute = ...  # type: Any
    second = ...  # type: Any

class DateField(_BaseFormattedField):
    db_field = ...  # type: Any
    formats = ...  # type: Any
    def python_value(self, value): ...  # type: Callable[[...], [datetime]]
    year = ...  # type: Any
    month = ...  # type: Any
    day = ...  # type: Any

class TimeField(_BaseFormattedField):
    db_field = ...  # type: Any
    formats = ...  # type: Any
    def python_value(self, value): ...
    hour = ...  # type: Any
    minute = ...  # type: Any
    second = ...  # type: Any

class TimestampField(IntegerField):
    valid_resolutions = ...  # type: Any
    resolution = ...  # type: Any
    utc = ...  # type: Any
    def __init__(self, *args, **kwargs): ...
    def get_db_field(self): ...
    def db_value(self, value): ...
    def python_value(self, value): ...

class BooleanField(Field):
    db_field = ...  # type: Any
    coerce = ...  # type: Any

class RelationDescriptor(FieldDescriptor):
    rel_model = ...  # type: Any
    def __init__(self, field, rel_model): ...
    def get_object_or_id(self, instance): ...
    def __get__(self, instance, instance_type=None): ...
    def __set__(self, instance, value): ...

class ReverseRelationDescriptor:
    field = ...  # type: Any
    rel_model = ...  # type: Any
    def __init__(self, field): ...
    def __get__(self, instance, instance_type=None): ...

class ObjectIdDescriptor:
    attr_name = ...  # type: Any
    field = ...  # type: Any
    def __init__(self, field): ...
    def __get__(self, instance, instance_type=None): ...
    def __set__(self, instance, value): ...

class ForeignKeyField(IntegerField):
    rel_model = ...  # type: Any
    deferred = ...  # type: Any
    on_delete = ...  # type: Any
    on_update = ...  # type: Any
    extra = ...  # type: Any
    to_field = ...  # type: Any
    def __init__(self, rel_model, related_name=None, on_delete=None, on_update=None, extra=None, to_field=None, *args, **kwargs): ...
    def clone_base(self, **kwargs): ...
    name = ...  # type: Any
    model_class = ...  # type: Any
    db_column = ...  # type: Any
    verbose_name = ...  # type: Any
    related_name = ...  # type: Any
    def add_to_class(self, model_class, name): ...
    def get_db_field(self): ...
    def get_modifiers(self): ...
    def coerce(self, value): ...
    def db_value(self, value): ...
    def python_value(self, value): ...

class CompositeKey:
    sequence = ...  # type: Any
    field_names = ...  # type: Any
    def __init__(self, *field_names): ...
    name = ...  # type: Any
    model_class = ...  # type: Any
    def add_to_class(self, model_class, name): ...
    def __get__(self, instance, instance_type=None): ...
    def __set__(self, instance, value): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class AliasMap:
    prefix = ...  # type: Any
    def __init__(self, start=0): ...
    def add(self, obj, alias=None): ...
    def __getitem__(self, obj): ...
    def __contains__(self, obj): ...
    def update(self, alias_map): ...

class QueryCompiler:
    field_map = ...  # type: Any
    op_map = ...  # type: Any
    join_map = ...  # type: Any
    alias_map_class = ...  # type: Any
    quote_char = ...  # type: Any
    interpolation = ...  # type: Any
    def __init__(self, quote_char='', interpolation='', field_overrides=None, op_overrides=None): ...
    def get_parse_map(self): ...
    def quote(self, s): ...
    def get_column_type(self, f): ...
    def get_op(self, q): ...
    def parse_node(self, node, alias_map=None, conv=None): ...
    def parse_node_list(self, nodes, alias_map, conv=None, glue=''): ...
    def calculate_alias_map(self, query, alias_map=None): ...
    def build_query(self, clauses, alias_map=None): ...
    def generate_joins(self, joins, model_class, alias_map): ...
    def generate_select(self, query, alias_map=None): ...
    def generate_update(self, query): ...
    def generate_insert(self, query): ...
    def generate_delete(self, query): ...
    def field_definition(self, field): ...
    def foreign_key_constraint(self, field): ...
    def return_parsed_node(function_name): ...
    create_foreign_key = ...  # type: Any
    create_table = ...  # type: Any
    drop_table = ...  # type: Any
    truncate_table = ...  # type: Any
    def index_name(self, table, columns): ...
    create_index = ...  # type: Any
    drop_index = ...  # type: Any
    create_sequence = ...  # type: Any
    drop_sequence = ...  # type: Any

class SqliteQueryCompiler(QueryCompiler):
    def truncate_table(self, model_class, restart_identity=False, cascade=False): ...

class ResultIterator:
    qrw = ...  # type: Any
    def __init__(self, qrw): ...
    def next(self): ...
    __next__ = ...  # type: Any

class QueryResultWrapper:
    model = ...  # type: Any
    cursor = ...  # type: Any
    column_meta = ...  # type: Any
    def __init__(self, model, cursor, meta=None): ...
    def __iter__(self): ...
    @property
    def count(self): ...
    def __len__(self): ...
    def process_row(self, row): ...
    def iterate(self): ...
    def iterator(self): ...
    def next(self): ...
    __next__ = ...  # type: Any
    def fill_cache(self, n=None): ...

class ExtQueryResultWrapper(QueryResultWrapper):
    conv = ...  # type: Any
    def initialize(self, description): ...

class TuplesQueryResultWrapper(ExtQueryResultWrapper):
    def process_row(self, row): ...

class NaiveQueryResultWrapper(ExtQueryResultWrapper):
    def process_row(self, row): ...

class DictQueryResultWrapper(ExtQueryResultWrapper):
    def process_row(self, row): ...

class ModelQueryResultWrapper(QueryResultWrapper):
    join_list = ...  # type: Any
    def initialize(self, description): ...
    def generate_column_map(self): ...
    def generate_join_list(self, models): ...
    def process_row(self, row): ...
    def construct_instances(self, row, keys=None): ...
    def follow_joins(self, collected): ...

JoinCache = namedtuple('JoinCache', [])

class AggregateQueryResultWrapper(ModelQueryResultWrapper):
    def __init__(self, *args, **kwargs): ...
    all_models = ...  # type: Any
    models_with_aggregate = ...  # type: Any
    back_references = ...  # type: Any
    source_to_dest = ...  # type: Any
    dest_to_source = ...  # type: Any
    columns_to_compare = ...  # type: Any
    def initialize(self, description): ...
    def read_model_data(self, row): ...
    def iterate(self): ...

class Query(Node):
    require_commit = ...  # type: Any
    model_class = ...  # type: Any
    database = ...  # type: Any
    def __init__(self, model_class): ...
    def clone(self): ...
    def where(self, *expressions): ...
    def orwhere(self, *expressions): ...
    def join(self, dest, join_type=None, on=None): ...
    def switch(self, model_class=None): ...
    def ensure_join(self, lm, rm, on=None, **join_kwargs): ...
    def convert_dict_to_node(self, qdict): ...
    def filter(self, *args, **kwargs): ...
    def compiler(self): ...
    def sql(self): ...
    def execute(self): ...
    def scalar(self, as_tuple=False, convert=False): ...

class RawQuery(Query):
    def __init__(self, model, query, *params): ...
    def clone(self): ...
    join = ...  # type: Any
    where = ...  # type: Any
    switch = ...  # type: Any
    def tuples(self, tuples=True): ...
    def dicts(self, dicts=True): ...
    def sql(self): ...
    def execute(self): ...
    def __iter__(self): ...

class SelectQuery(Query):
    require_commit = ...  # type: Any
    def __init__(self, model_class, *selection): ...
    def compound_op(operator): ...
    __or__ = ...  # type: Any
    __and__ = ...  # type: Any
    __sub__ = ...  # type: Any
    def __xor__(self, rhs): ...
    def union_all(self, rhs): ...
    select = ...  # type: Any
    def from_(self, *args): ...
    def group_by(self, *args, **kwargs): ...
    def having(self, *expressions): ...
    def order_by(self, *args, **kwargs): ...
    def window(self, *windows, **kwargs): ...
    def limit(self, lim): ...
    def offset(self, off): ...
    def paginate(self, page, paginate_by=20): ...
    def distinct(self, is_distinct=True): ...
    def for_update(self, for_update=True, nowait=False): ...
    def naive(self, naive=True): ...
    def tuples(self, tuples=True): ...
    def dicts(self, dicts=True): ...
    def aggregate_rows(self, aggregate_rows=True): ...
    def alias(self, alias=None): ...
    def annotate(self, rel_model, annotation=None): ...
    def aggregate(self, aggregation=None, convert=True): ...
    def count(self, clear_limit=False): ...
    def wrapped_count(self, clear_limit=False): ...
    def exists(self): ...
    def get(self): ...
    def peek(self, n=1): ...
    def first(self, n=1): ...
    def sql(self): ...
    def verify_naive(self): ...
    def get_query_meta(self): ...
    def execute(self): ...
    def __iter__(self): ...
    def iterator(self): ...
    def __getitem__(self, value): ...
    def __len__(self): ...
    def __hash__(self): ...

class NoopSelectQuery(SelectQuery):
    def sql(self): ...
    def get_query_meta(self): ...

class CompoundSelect(SelectQuery):
    lhs = ...  # type: Any
    operator = ...  # type: Any
    rhs = ...  # type: Any
    def __init__(self, model_class, lhs=None, operator=None, rhs=None): ...
    def count(self, clear_limit=False): ...
    def get_query_meta(self): ...
    def verify_naive(self): ...

class _WriteQuery(Query):
    def __init__(self, model_class): ...
    def requires_returning(method): ...
    def returning(self, *selection): ...
    def tuples(self, tuples=True): ...
    def dicts(self, dicts=True): ...
    def get_result_wrapper(self): ...

class UpdateQuery(_WriteQuery):
    def __init__(self, model_class, update=None): ...
    def on_conflict(self, action=None): ...
    join = ...  # type: Any
    def sql(self): ...
    def execute(self): ...
    def __iter__(self): ...
    def iterator(self): ...

class InsertQuery(_WriteQuery):
    def __init__(self, model_class, field_dict=None, rows=None, fields=None, query=None, validate_fields=False): ...
    join = ...  # type: Any
    where = ...  # type: Any
    def upsert(self, upsert=True): ...
    def on_conflict(self, action=None): ...
    def return_id_list(self, return_id_list=True): ...
    @property
    def is_insert_returning(self): ...
    def sql(self): ...
    def execute(self): ...

class DeleteQuery(_WriteQuery):
    join = ...  # type: Any
    def sql(self): ...
    def execute(self): ...

IndexMetadata = namedtuple('IndexMetadata', [])

ColumnMetadata = namedtuple('ColumnMetadata', [])

ForeignKeyMetadata = namedtuple('ForeignKeyMetadata', [])

class PeeweeException(Exception): ...
class ImproperlyConfigured(PeeweeException): ...
class DatabaseError(PeeweeException): ...
class DataError(DatabaseError): ...
class IntegrityError(DatabaseError): ...
class InterfaceError(PeeweeException): ...
class InternalError(DatabaseError): ...
class NotSupportedError(DatabaseError): ...
class OperationalError(DatabaseError): ...
class ProgrammingError(DatabaseError): ...

class ExceptionWrapper:
    exceptions = ...  # type: Any
    def __init__(self, exceptions): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback): ...

class _BaseConnectionLocal:
    autocommit = ...  # type: Any
    closed = ...  # type: Any
    conn = ...  # type: Any
    context_stack = ...  # type: Any
    transactions = ...  # type: Any
    def __init__(self, **kwargs): ...

class _ConnectionLocal(_BaseConnectionLocal, threading.local): ...

class Database:
    commit_select = ...  # type: Any
    compiler_class = ...  # type: Any
    compound_operations = ...  # type: Any
    compound_select_parentheses = ...  # type: Any
    distinct_on = ...  # type: Any
    drop_cascade = ...  # type: Any
    field_overrides = ...  # type: Any
    foreign_keys = ...  # type: Any
    for_update = ...  # type: Any
    for_update_nowait = ...  # type: Any
    insert_many = ...  # type: Any
    insert_returning = ...  # type: Any
    interpolation = ...  # type: Any
    limit_max = ...  # type: Any
    op_overrides = ...  # type: Any
    quote_char = ...  # type: Any
    reserved_tables = ...  # type: Any
    returning_clause = ...  # type: Any
    savepoints = ...  # type: Any
    sequences = ...  # type: Any
    subquery_delete_same_table = ...  # type: Any
    upsert_sql = ...  # type: Any
    window_functions = ...  # type: Any
    exceptions = ...  # type: Any
    connect_kwargs = ...  # type: Any
    autocommit = ...  # type: Any
    autorollback = ...  # type: Any
    use_speedups = ...  # type: Any
    def __init__(self, database, threadlocals=True, autocommit=True, fields=None, ops=None, autorollback=False, use_speedups=True, **connect_kwargs): ...
    deferred = ...  # type: Any
    database = ...  # type: Any
    def init(self, database, **connect_kwargs): ...
    def exception_wrapper(self): ...
    def connect(self): ...
    def initialize_connection(self, conn): ...
    def close(self): ...
    def get_conn(self): ...
    def is_closed(self): ...
    def get_cursor(self): ...
    @classmethod
    def register_fields(cls, fields): ...
    @classmethod
    def register_ops(cls, ops): ...
    def get_result_wrapper(self, wrapper_type): ...
    def last_insert_id(self, cursor, model): ...
    def rows_affected(self, cursor): ...
    def compiler(self): ...
    def execute(self, clause): ...
    def execute_sql(self, sql, params=None, require_commit=True): ...
    def begin(self): ...
    def commit(self): ...
    def rollback(self): ...
    def set_autocommit(self, autocommit): ...
    def get_autocommit(self): ...
    def push_execution_context(self, transaction): ...
    def pop_execution_context(self): ...
    def execution_context_depth(self): ...
    def execution_context(self, with_transaction=True): ...
    def push_transaction(self, transaction): ...
    def pop_transaction(self): ...
    def transaction_depth(self): ...
    def transaction(self): ...
    def commit_on_success(self, func): ...
    def savepoint(self, sid=None): ...
    def atomic(self): ...
    def get_tables(self, schema=None): ...
    def get_indexes(self, table, schema=None): ...
    def get_columns(self, table, schema=None): ...
    def get_primary_keys(self, table, schema=None): ...
    def get_foreign_keys(self, table, schema=None): ...
    def sequence_exists(self, seq): ...
    def create_table(self, model_class, safe=False): ...
    def create_tables(self, models, safe=False): ...
    def create_index(self, model_class, fields, unique=False): ...
    def drop_index(self, model_class, fields, safe=False): ...
    def create_foreign_key(self, model_class, field, constraint=None): ...
    def create_sequence(self, seq): ...
    def drop_table(self, model_class, fail_silently=False, cascade=False): ...
    def drop_tables(self, models, safe=False, cascade=False): ...
    def truncate_table(self, model_class, restart_identity=False, cascade=False): ...
    def truncate_tables(self, models, restart_identity=False, cascade=False): ...
    def drop_sequence(self, seq): ...
    def extract_date(self, date_part, date_field): ...
    def truncate_date(self, date_part, date_field): ...
    def default_insert_clause(self, model_class): ...
    def get_noop_sql(self): ...
    def get_binary_type(self): ...

class SqliteDatabase(Database):
    compiler_class = ...  # type: Any
    field_overrides = ...  # type: Any
    foreign_keys = ...  # type: Any
    insert_many = ...  # type: Any
    limit_max = ...  # type: Any
    op_overrides = ...  # type: Any
    upsert_sql = ...  # type: Any
    def __init__(self, database, pragmas=None, *args, **kwargs): ...
    def begin(self, lock_type=''): ...
    def create_foreign_key(self, model_class, field, constraint=None): ...
    def get_tables(self, schema=None): ...
    def get_indexes(self, table, schema=None): ...
    def get_columns(self, table, schema=None): ...
    def get_primary_keys(self, table, schema=None): ...
    def get_foreign_keys(self, table, schema=None): ...
    def savepoint(self, sid=None): ...
    def extract_date(self, date_part, date_field): ...
    def truncate_date(self, date_part, date_field): ...
    def get_binary_type(self): ...

class PostgresqlDatabase(Database):
    commit_select = ...  # type: Any
    compound_select_parentheses = ...  # type: Any
    distinct_on = ...  # type: Any
    drop_cascade = ...  # type: Any
    field_overrides = ...  # type: Any
    for_update = ...  # type: Any
    for_update_nowait = ...  # type: Any
    insert_returning = ...  # type: Any
    interpolation = ...  # type: Any
    op_overrides = ...  # type: Any
    reserved_tables = ...  # type: Any
    returning_clause = ...  # type: Any
    sequences = ...  # type: Any
    window_functions = ...  # type: Any
    register_unicode = ...  # type: Any
    def last_insert_id(self, cursor, model): ...
    def get_tables(self, schema=''): ...
    def get_indexes(self, table, schema=''): ...
    def get_columns(self, table, schema=''): ...
    def get_primary_keys(self, table, schema=''): ...
    def get_foreign_keys(self, table, schema=''): ...
    def sequence_exists(self, sequence): ...
    def set_search_path(self, *search_path): ...
    def get_noop_sql(self): ...
    def get_binary_type(self): ...

class MySQLDatabase(Database):
    commit_select = ...  # type: Any
    compound_select_parentheses = ...  # type: Any
    compound_operations = ...  # type: Any
    field_overrides = ...  # type: Any
    for_update = ...  # type: Any
    interpolation = ...  # type: Any
    limit_max = ...  # type: Any
    op_overrides = ...  # type: Any
    quote_char = ...  # type: Any
    subquery_delete_same_table = ...  # type: Any
    upsert_sql = ...  # type: Any
    def get_tables(self, schema=None): ...
    def get_indexes(self, table, schema=None): ...
    def get_columns(self, table, schema=None): ...
    def get_primary_keys(self, table, schema=None): ...
    def get_foreign_keys(self, table, schema=None): ...
    def extract_date(self, date_part, date_field): ...
    def truncate_date(self, date_part, date_field): ...
    def default_insert_clause(self, model_class): ...
    def get_noop_sql(self): ...
    def get_binary_type(self): ...

class _callable_context_manager:
    def __call__(self, fn): ...

class ExecutionContext(_callable_context_manager):
    database = ...  # type: Any
    with_transaction = ...  # type: Any
    connection = ...  # type: Any
    def __init__(self, database, with_transaction=True): ...
    txn = ...  # type: Any
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...

class Using(ExecutionContext):
    models = ...  # type: Any
    def __init__(self, database, models, with_transaction=True): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...

class _atomic(_callable_context_manager):
    db = ...  # type: Any
    def __init__(self, db): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...

class transaction(_callable_context_manager):
    db = ...  # type: Any
    def __init__(self, db): ...
    def commit(self, begin=True): ...
    def rollback(self, begin=True): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...

class savepoint(_callable_context_manager):
    db = ...  # type: Any
    sid = ...  # type: Any
    quoted_sid = ...  # type: Any
    def __init__(self, db, sid=None): ...
    def commit(self): ...
    def rollback(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...

class savepoint_sqlite(savepoint):
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...

class FieldProxy(Field):
    model = ...  # type: Any
    field_instance = ...  # type: Any
    def __init__(self, alias, field_instance): ...
    def clone_base(self): ...
    def coerce(self, value): ...
    def python_value(self, value): ...
    def db_value(self, value): ...
    def __getattr__(self, attr): ...

class ModelAlias:
    def __init__(self, model_class): ...
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, value): ...
    def get_proxy_fields(self, declared_fields=False): ...
    def select(self, *selection): ...
    def __call__(self, **kwargs): ...

class _SortedFieldList:
    def __init__(self): ...
    def __getitem__(self, i): ...
    def __iter__(self): ...
    def __contains__(self, item): ...
    def index(self, field): ...
    def insert(self, item): ...
    def remove(self, item): ...

class DoesNotExist(Exception): ...

class ModelOptions:
    model_class = ...  # type: Any
    name = ...  # type: Any
    fields = ...  # type: Any
    columns = ...  # type: Any
    defaults = ...  # type: Any
    sorted_fields = ...  # type: Any
    sorted_field_names = ...  # type: Any
    valid_fields = ...  # type: Any
    declared_fields = ...  # type: Any
    database = ...  # type: Any
    db_table = ...  # type: Any
    db_table_func = ...  # type: Any
    indexes = ...  # type: Any
    order_by = ...  # type: Any
    primary_key = ...  # type: Any
    table_alias = ...  # type: Any
    constraints = ...  # type: Any
    schema = ...  # type: Any
    validate_backrefs = ...  # type: Any
    only_save_dirty = ...  # type: Any
    auto_increment = ...  # type: Any
    composite_key = ...  # type: Any
    rel = ...  # type: Any
    reverse_rel = ...  # type: Any
    def __init__(self, cls, database=None, db_table=None, db_table_func=None, indexes=None, order_by=None, primary_key=None, table_alias=None, constraints=None, schema=None, validate_backrefs=True, only_save_dirty=False, **kwargs): ...
    def prepared(self): ...
    def add_field(self, field): ...
    def remove_field(self, field_name): ...
    def get_default_dict(self): ...
    def get_field_index(self, field): ...
    def get_primary_key_fields(self): ...
    def rel_for_model(self, model, field_obj=None, multi=False): ...
    def reverse_rel_for_model(self, model, field_obj=None, multi=False): ...
    def rel_exists(self, model): ...
    def related_models(self, backrefs=False): ...

class BaseModel(type):
    inheritable = ...  # type: Any
    def __new__(cls, name, bases, attrs): ...
    def __iter__(self): ...

class Model:
    def __init__(self, *args, **kwargs): ...
    @classmethod
    def alias(cls): ...
    @classmethod
    def select(cls, *selection): ...
    @classmethod
    def update(cls, __data=None, **update): ...
    @classmethod
    def insert(cls, __data=None, **insert): ...
    @classmethod
    def insert_many(cls, rows, validate_fields=True): ...
    @classmethod
    def insert_from(cls, fields, query): ...
    @classmethod
    def delete(cls): ...
    @classmethod
    def raw(cls, sql, *params): ...
    @classmethod
    def create(cls, **query): ...
    @classmethod
    def get(cls, *query, **kwargs): ...
    @classmethod
    def get_or_create(cls, **kwargs): ...
    @classmethod
    def create_or_get(cls, **kwargs): ...
    @classmethod
    def filter(cls, *dq, **query): ...
    @classmethod
    def table_exists(cls): ...
    @classmethod
    def create_table(cls, fail_silently=False): ...
    @classmethod
    def sqlall(cls): ...
    @classmethod
    def drop_table(cls, fail_silently=False, cascade=False): ...
    @classmethod
    def truncate_table(cls, restart_identity=False, cascade=False): ...
    @classmethod
    def as_entity(cls): ...
    @classmethod
    def noop(cls, *args, **kwargs): ...
    get_id = ...  # type: Any
    set_id = ...  # type: Any
    def prepared(self): ...
    def save(self, force_insert=False, only=None): ...
    def is_dirty(self): ...
    @property
    def dirty_fields(self): ...
    def dependencies(self, search_nullable=False): ...
    def delete_instance(self, recursive=False, delete_nullable=False): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

__prefetched = namedtuple('__prefetched', [])

class PrefetchResult(__prefetched):
    def __new__(cls, query, fields=None, backref=None, rel_models=None, field_to_name=None, model=None): ...
    def populate_instance(self, instance, id_map): ...
    def store_instance(self, instance, id_map): ...

def prefetch(sq, *subqueries): ...
